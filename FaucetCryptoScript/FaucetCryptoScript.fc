
using FaucetCollector.Captcha;
using FaucetCollector.Script;

using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

using System;
using System.Linq;
//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha
public class FaucetCryptoScript : FaucetScript
{

    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings("https://faucetcrypto.com/")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Ptc",Display="Try claim PTC",Type=EditorType.CheckBox,Default=true}

            };
        }
    }



    public override void Start()
    {
        Title = "Faucet Crypto";
        SuccessXPath = "//*[contains(text(),'')]";
        FailXPath = "//*[contains(text(),'')]";
        base.Start();
    }

    private void HoldElement(IWebElement element)
    {
        if (!IsVisible(element))
        {
            return;
        }
        Actions actionsBuilder = new Actions(Driver);

        actionsBuilder.MoveToElement(element).Build().Perform();



    }

    public override int DoLogin()
    {
        GoToUrl("https://faucetcrypto.com/login");


        Wait(1, 2);

        var emailBox = ElementByXPath("//input[@type='email']");
        if (!IsVisible(emailBox))
        {
            return Fail("Email box is not visible or not found");
        }

        SetText(emailBox, GetSetting("User"));

        var passwordBox = ElementByXPath("//input[@type='password']");
        if (!IsVisible(passwordBox))
        {
            return Fail("Password box is not visible or not found");
        }

        SetText(passwordBox, GetPassword("Pass"));

        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return result;
        }

        var loginBtn = ElementByXPath("//button[contains(text(),'Login')]");
        if (!IsVisible(loginBtn))
        {
            return Fail("login button not visible or not found");
        }
        Click(loginBtn);


        var errorLogin = ElementByXPath("//h6[contains(@class,'leading-5')]");
        if (IsVisible(errorLogin))
        {
            Log(errorLogin.Text);
        }

        return base.DoLogin();
    }

    public override int AfterLogin()
    {
        var skipBtn = ElementByXPath("//button[contains(text(),'Skip')]");
        if (IsVisible(skipBtn))
        {
            Click(skipBtn);
            Wait(1, 2);
        }

        return base.AfterLogin();
    }
    public override bool IsLoggedIn()
    {

        return ElementByXPath("//a[contains(@href,'faucet-claim')]|//a[contains(@href,'coin-balance')]") != null;

    }
    
    public override int DoSolveCaptcha()
    {

        var recaptchaContainer = ElementsByXPath("//iframe[contains(@src,'recaptcha')]").Where(fr => IsVisible(fr)).ToList();

        if (recaptchaContainer.Count > 0)
        {

            RecaptchaUtility utility = new RecaptchaUtility(this);
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return result;
            }
            utility.DoSolve();
        }

        if (IsVisbileAntibotLinks)
        {
            AntibotLinksMlUtils antibotLinksMlUtils = new AntibotLinksMlUtils(this);

            antibotLinksMlUtils.AntibotLinksHeaderXPath = "//div[contains(@class,'block')]//img[contains(@src,'data:image')]";

            antibotLinksMlUtils.AntibotLinksBodyXPath = "//a[@href]//img[contains(@src,'data:image')]";


            return antibotLinksMlUtils.DosolveAntibotLinks();

        }




        return 0;
    }

    private bool IsVisbileAntibotLinks
    {
        get
        {
            return ElementByXPath("//div[contains(@class,'block')]//img[contains(@src,'data:image')]") != null;
        }
    }
    public override int BeforeSolveFaucet()
    {

        if (GetBoolSetting("Ptc"))
        {
            GoToUrl("https://faucetcrypto.com/ptc/list");
            Wait(1, 2);


            var availableAdvertisements = ElementsByXPath("//a[contains(@href,'ptc-advertisement')]").Where(ad => IsVisible(ad)).ToList();
            int adCount = 0;
            while (availableAdvertisements.Count > 0)
            {
                try
                {
                    Click(availableAdvertisements[adCount]);
                    Wait(1, 2);
                    var result = DoSolveCaptcha();
                    if (result > 0)
                    {
                        Log("Need to wait");
                        break;
                    }
                    var buttonClaim = ElementByXPath("//span[contains(@class,'notranslate')]//button");
                    if (!IsVisible(buttonClaim))
                    {
                        Log("Error has been ocurred trying to claim the ad", Level.Error);


                    }

                    HoldElement(buttonClaim);


                    DateTime timeout = DateTime.Now.AddSeconds(40);

                    while (IsVisible(buttonClaim) && !buttonClaim.Text.Contains("Get Reward") && DateTime.Now < timeout)
                    {
                        Wait(1, 2);
                        buttonClaim = ElementByXPath("//span[contains(@class,'notranslate')]//button");
                    }
                    Wait(1, 2);



                    Click(buttonClaim);
                    Wait(2, 3);

                    var insideAdButton = ElementByXPath("//span//a[contains(text(),'Continue')]");




                    timeout = DateTime.Now.AddSeconds(75);

                    while (!IsVisible(insideAdButton) && DateTime.Now < timeout)
                    {
                        Wait(1, 2);
                        insideAdButton = ElementByXPath("//span//a[contains(text(),'Continue')]");
                    }
                    Wait(1, 2);
                    Log("Clicking on the button");
                    if (IsVisible(insideAdButton))
                    {
                        Click(insideAdButton);
                        Wait(1);
                    }






                }
                finally
                {

                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    CheckForPopups();
                    GoToUrl("https://faucetcrypto.com/ptc/list");
                    Wait(1, 2);
                    availableAdvertisements = ElementsByXPath("//a[contains(@href,'ptc-advertisement')]").Where(ad => IsVisible(ad)).ToList();
                }

            }

        }
        return base.BeforeSolveFaucet();
    }
    public override int DoSolveFaucet()
    {

        GoToUrl("https://faucetcrypto.com/task/faucet-claim");
        Wait(1, 2);

        var result = DoSolveCaptcha();
        if (result > 0)
        {


            Log("We need to wait 5 minutes");
            return 300;
            //return result;
        }

        if (IsVisbileAntibotLinks)
        {
            return Fail("We need to solve the captcha a new time");
        }

        var buttonClaim = ElementByXPath("//span[contains(@class,'notranslate')]//button");
        if (!IsVisible(buttonClaim))
        {
            return Fail("button claim is not visible or not found");
        }
        HoldElement(buttonClaim);

        DateTime timeout = DateTime.Now.AddSeconds(25);

        while (IsVisible(buttonClaim) && !buttonClaim.Text.Contains("Get Reward") && DateTime.Now < timeout)
        {
            Wait(1, 2);
            buttonClaim = ElementByXPath("//span[contains(@class,'notranslate')]//button");
        }
        Wait(1, 2);

        Click(buttonClaim);


        return base.DoSolveFaucet();
    }

    public override int GetFaucetWaitTime()
    {
        var timerElement = ElementByXPath("//span[contains(@class,'notranslate') and contains(text(),':')]");
        if (IsVisible(timerElement))
        {

            string timerText = timerElement.Text;

            if (!string.IsNullOrEmpty(timerText))
            {
                var splitedTimer = timerText.Split(':');


                if (splitedTimer.Length == 3)
                {

                    int m, s, h;

                    if (int.TryParse(splitedTimer[0], out h) && int.TryParse(splitedTimer[1], out m) && int.TryParse(splitedTimer[2], out s))
                    {

                        return m * 60 + h * 3600 + s;
                    }
                }
            }
        }

        return base.GetFaucetWaitTime();

    }










}

