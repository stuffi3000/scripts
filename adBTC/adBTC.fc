
using FaucetCollector.Captcha;
using FaucetCollector.Script;

using OpenQA.Selenium;

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
//css_ref FaucetCollector.Utilities
//css_ref FaucetCollector.Captcha
namespace Adbtc
{
    public class TemplateScript : FaucetScript
    {


        public override FaucetSettings Settings
        {
            get
            {

                return new FaucetSettings("https://adbtc.top/")
                {
                    new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                    new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true },
                    new FaucetSetting(){Name="UseMath",Display="Use Symbol captcha",Type=EditorType.CheckBox,Default=false},
                    new FaucetSetting(){Name="D",Display="Disable After Finish",Type=EditorType.CheckBox,Default=false},
                    new FaucetSetting(){Name="SA",Display="Surf in active window",Type=EditorType.CheckBox,Default=true},
                    new FaucetSetting(){Name="AS",Display="Auto Surfing",Type=EditorType.CheckBox,Default=true},
                    new FaucetSetting(){Name="Faucet",Display="Try claim the faucet",Type=EditorType.CheckBox,Default=true}

                };
            }
        }


        SymbolsCaptchaSolver SymbolsCaptchaSolver;
        public override void Start()
        {
            SymbolsCaptchaSolver = new SymbolsCaptchaSolver(this);
            Title = "adbtc.top|DO|YOUH|You|Please solve the|satoshi|Bitcoin|Just a moment|adbtc|YES!|Active Window";

            SuccessXPath = "//p[@class='white-text flow-text']";
            FailXPath = "//a[@class='btn-large light-blue darken-4']";
            ErrorCount = 0;

            base.Start();
        }

        public override int DoInit()
        {
            return base.DoInit();
        }
        public override bool IsLoggedIn()
        {

            bool Logged = ElementByXPath("//a[contains(@href,'logout')]") != null;
            if (Logged)
            {
                ErrorCount = 0;

            }
            return Logged;
        }
        public int SolveSymbolCaptcha()
        {


            var imgs = ElementsByXPath("//img[contains(@src,'1captcha')]").Where(x => IsVisible(x)).ToList();


            if (imgs.Count != 2)
            {
                return 5;
            }

            using (Bitmap bitmap1 = TakeScreenshot(Base.Captcha.CaptchaService.Manual, imgs[0]))
            {
                using (Bitmap bitmap2 = TakeScreenshot(Base.Captcha.CaptchaService.Manual, imgs[1]))
                {
                    using (Bitmap dbmp = DoubleMathCaptchaCuter.MergeTwoImages(bitmap1, bitmap2))
                    {

                        using (MemoryStream memoryStream = new MemoryStream())
                        {
                            dbmp.Save(memoryStream, ImageFormat.Png);

                            string base64 = Convert.ToBase64String(memoryStream.ToArray());
                            base64 = "data:image/png;base64," + base64;

                            ExecuteScript("arguments[0].removeAttribute('style')", imgs[0]);

                            ExecuteScript("arguments[0].setAttribute('src','" + base64 + "');", imgs[0]);

                            Wait(1);
                            return DoSolveImageCaptcha(imgs[0], ElementByXPath("//input[@type='number']"));



                        }
                    }

                }

            }


        }


        public override int BeforeLogin()
        {
            if (Driver.Url != "https://adbtc.top/")
            {
                GoToUrl("https://adbtc.top/");
                Wait();
            }

            CheckCloudFlare();

            var GotoLogin = ElementByXPath("//a[contains(@href,'/index/authorize')]");
            if (!IsVisible(GotoLogin))
            {
                return Fail("Go to login is not visible");
            }
            Click(GotoLogin);
            Wait();

            return base.BeforeLogin();
        }

        private void CheckCloudFlare()
        {
            FaucetCollector.Utilities.CloudFlareUtilities cloudUtils = new FaucetCollector.Utilities.CloudFlareUtilities(this);
            cloudUtils.DoSolve();
        }
        public override int DoLogin()
        {

            var AddressBox = ElementsByXPath("//input[@type='text' and @required]|//label[contains(text(), 'Email')]//..//input").FirstOrDefault(X => IsVisible(X));
            if (AddressBox == null)
            {
                return Fail("Fail To login address box is not visible");
            }
            var PasswordBox = ElementByXPath("//input[@type='password']");
            if (!IsVisible(PasswordBox))
            {
                return Fail("Fail login Password box not visible");
            }

            int result = SolveCapt();
            if (result > 0)
            {
                return Fail("Fail Solving captcha");
            }
            //Captcha probably changed and site refreshed so we need to update the elements and check if it's visible

            AddressBox = ElementsByXPath("//input[@type='text' and @required]|//label[contains(text(), 'Email')]//..//input").FirstOrDefault(x => IsVisible(x));
            if (AddressBox == null)
            {
                return Fail("Fail To login address box is not visible  after solve login captcha");
            }
            PasswordBox = ElementByXPath("//input[@type='password']");
            if (!IsVisible(PasswordBox))
            {
                return Fail("Fail login Password box not visible after solve login captcha");
            }
            SetText(AddressBox, GetSetting("User"));
            SetText(PasswordBox, GetPassword("Pass"));
            Wait(1);

            var ButtonLogin = ElementByXPath("//input[@class='btn light-blue darken-4']");
            if (!IsVisible(ButtonLogin))
            {
                return Fail("Fail, button login is not visible");
            }
            Click(ButtonLogin);


            var ErrorBox = ElementByXPath("//div[@class='col s12 red']//p");
            if (IsVisible(ErrorBox))
            {
                Log(ErrorBox.Text);
                ErrorCount++;
                if (ErrorCount > 3)
                {
                    Log("Cookies/cache problem detected, the browser will be closed");
                    Driver.Manage().Cookies.DeleteAllCookies();
                    Quit();
                    Context.CleanBrowserDataNow();
                }
            }
            //This faucet has nothing to do here. We will let Faucet Collector handle it.
            return base.DoLogin();
        }
        public int ErrorCount { get; set; }
        public static string ConvertImageToBase64String(Bitmap image_)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                image_.Save(ms, ImageFormat.Jpeg);
                return Convert.ToBase64String(ms.ToArray());
            }
        }

        public override int GetFaucetWaitTime()
        {
            var finish = ElementByXPath("//*[contains(text(),'You watched all websites for now.')]");
            if (IsVisible(finish))
            {

                return GetWaitSetting();
            }
            return 0;
        }
        private void OpenMenu()
        {
            // Open the menu if we are in mobile design 
            var OpenMenuBtn = ElementByXPath("//a[@class='sidenav-trigger']");
            if (IsVisible(OpenMenuBtn))
            {
                Click(OpenMenuBtn);
                Wait(1);
            }
        }
        public override int BeforeSolveFaucet()
        {
            // Open the menu if we are in mobile design 
            OpenMenu();

            var surf = ElementByXPath("//a[contains(@href,'https://adbtc.top/surf/browse')]//li[contains(@class,'collection-item')]");
            if (!IsVisible(surf))
            {
                return Fail("Go to ad area button is not visible");
            }
            Click(surf);
            return base.BeforeSolveFaucet();
        }
        public override int DoSolveFaucet()
        {
            bool Finished = false;
            Wait(3);
            int ErrorCount = 0;
            do
            {
                Wait(2, 3);
                var b = ElementByXPath("//h5[@class='red-text']");
                if (IsVisible(b))
                {
                    Log(b.Text);

                }
                // View for the site failed , skipping it.
                var ButtonSkip = ElementByXPath("//a[contains(@href,'/surf/skip') and contains(@class,'valign-wrapper red white-text btn center animated btn-large jello')]");
                if (IsVisible(ButtonSkip))
                {
                    Log("Add Skiped, Refreshing site");
                    Click(ButtonSkip);
                    Wait(2);
                }
                // We need to solve captcha
                var ButtonSubmitCaptcha = ElementByXPath("//input[@type='submit']");
                if (IsVisible(ButtonSubmitCaptcha))
                {
                    var result = SolveCapt();
                    if (result > 0)
                    {
                        ErrorCount++;
                        if (ErrorCount > 3)
                        {
                            break;
                        }
                        Driver.Navigate().Refresh();
                        Wait(1);
                        continue;
                    }
                    else
                    {
                        ErrorCount = 0;
                    }
                    Wait();
                    // Since that when we switch the captcha the site is refreshed we will need to update the element before click the button.
                    ButtonSubmitCaptcha = ElementByXPath("//input[@type='submit']");
                    if (IsVisible(ButtonSubmitCaptcha))
                    {
                        Click(ButtonSubmitCaptcha);
                    }

                }
                else
                {

                    // We finished viewing all ads
                    var finish = ElementByXPath("//*[contains(text(),'You watched all websites for now.')]");
                    if (IsVisible(finish))
                    {
                        Finished = true;
                        CheckFaucetResult();

                    }
                    //We  are ready to see the ad
                    else
                    {

                        var bt = ElementByXPath("//a[contains(@class,'btn ') and not(contains(@href,'skip'))]");

                        if (IsVisible(bt))
                        {
                            try
                            {
                                ErrorCount = 0;
                                CheckForPopupsEnabled = false;
                                // Unique .click 
                                var Reward = ElementsByXPath("//b[contains(text(),'satoshi')]").Where(x => IsVisible(x)).LastOrDefault();
                                if (Reward != null)
                                {
                                    Log("Viewing ad you will be credited with " + Reward.Text);
                                }

                                Click(bt, false);
                                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                                DateTime t1 = DateTime.Now.AddMinutes(3);
                                Wait(5);
                                while (IsVisible(ElementByXPath("//div[@class='preloader-wrapper big active']")))
                                {
                                    Wait();
                                    if (DateTime.Now > t1)
                                    {
                                        break;

                                    }
                                }
                            }
                            finally
                            {
                                Wait(2);
                                CheckForPopupsEnabled = true;
                                CheckForPopups();
                            }
                        }
                        else
                        {
                            ErrorCount++;
                            Log("Something is wrong Button to see ad isn't visible, Probably there is a problem with the site or we already have finished view the ads");
                            Wait(5);
                            if (ErrorCount >= 2)
                            {
                                Log("We finished view of the ads");
                                break;
                            }
                        }


                    }

                }
            } while (!Finished);

            if (GetBoolSetting("Faucet"))
            {
                // Open the menu if we are in mobile design 
                OpenMenu();
                // If the user like to claim the faucet  we see if the button to go to the faucet is visible
                var GotoFaucetBtn = ElementByXPath("//a[@href='https://adbtc.top/faucet']//li[contains(@class,'collection-item')]");
                if (IsVisible(GotoFaucetBtn))
                {
                    Click(GotoFaucetBtn);
                }
                else
                {
                    //We go to the url if the button is not visible
                    GoToUrl("https://adbtc.top/faucet");
                }

                Wait(2);

                // We see if the button to claim the faucet is visible
                var ClaimFaucetBtn = ElementByXPath("//a[@class='btn green']");
                if (!IsVisible(ClaimFaucetBtn))
                {
                    Log("Faucet is not ready yet");
                }
                else
                {

                    // We init shortlink
                    FaucetCollector.Utilities.ShortLinkBypasser bypasser = new FaucetCollector.Utilities.ShortLinkBypasser(this);
                    Click(ClaimFaucetBtn);

                    bool claimed = bypasser.DoShortLink();
                    if (claimed)
                    {
                        var headerClaim = ElementByXPath("//h5[@class='header']");
                        if (IsVisible(headerClaim))
                        {
                            Log(headerClaim.Text);
                        }
                    }


                }
            }

            if (GetBoolSetting("SA"))
            {
                if (!Driver.Url.Contains("adbtc"))
                {
                    GoToUrl("http://adbtc.top/surftab/inf");
                }
                OpenMenu();
                var GotoSurfAds = ElementByXPath("//a[@href='http://adbtc.top/surftab/inf']");
                if (IsVisible(GotoSurfAds))
                {
                    Click(GotoSurfAds);
                }
                else
                {
                    GoToUrl("http://adbtc.top/surftab/inf");
                }
                Wait(2);
                var ads = ElementsByXPath("//a[@class='open']").Where(x => IsVisible(x)).ToList();
                Log(ads.Count.ToString() + " Active ads detected");
                int n = 0;
                int CountErrors = 0;
                int adsCount = ads.Count;

                while (ads.Count > n && CountErrors <= 3)
                {
                    try
                    {


                        CheckForPopupsEnabled = false;
                        Click(ads[n], false);
                        Wait(2);
                        Driver.SwitchTo().Window(Driver.WindowHandles.LastOrDefault());

                        var imgs = ElementsByXPath("//a[@class='res']//img");
                        DateTime timeout = DateTime.Now.AddSeconds(30);
                        while (imgs.Count == 0 && DateTime.Now < timeout)
                        {
                            Wait();
                            imgs = ElementsByXPath("//a[@class='res']//img");
                        }

                        bool solved = SolveIcons();
                        if (!solved)
                        {
                            Log("Something is wrong with the ad", Level.Error);
                        }
                        Wait(2, 3);
                    }
                    finally
                    {
                        CheckForPopupsEnabled = true;
                        CheckForPopups();
                        Driver.SwitchTo().Window(Driver.WindowHandles[0]);


                        Driver.SwitchTo().DefaultContent();

                        ads = ElementsByXPath("//a[@class='open']").Where(x => IsVisible(x)).ToList();

                        if (adsCount == ads.Count)
                        {
                            n++;
                        }

                        adsCount = ads.Count;

                        Log(ads.Count.ToString() + " Active ads detected");
                    }
                }
            }

            Wait();
            if (GetBoolSetting("AS"))
            {
                OpenMenu();
                try
                {
                    var GotoAutoSurf = ElementByXPath("//a[@href='http://adbtc.top/autosurf/inf']");
                    if (IsVisible(GotoAutoSurf))
                    {
                        Click(GotoAutoSurf);
                        Wait(3);
                    }
                    else
                    {
                        GoToUrl("http://adbtc.top/autosurf/inf");


                    }
                    Wait();
                    var button = ElementByXPath("//a[@id='start']");
                    if (IsVisible(button))
                    {
                        CheckForPopupsEnabled = false;
                        Click(button, false);
                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                    }
                    Wait(1);
                    DateTime t1 = DateTime.Now.AddMinutes(5);
                    while (IsVisible(ElementByXPath("//span[@id='tmr']")) && !IsVisible(ElementByXPath("//h5[contains(text(),'You watched all websites for now. Please, come bac')]")))
                    {
                        Wait(4, 6);
                        if (DateTime.Now > t1)
                        {
                            break;
                        }
                    }
                    Wait(5);

                }
                catch (Exception)
                {

                }
                finally
                {
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                }

            }

            if (GetBoolSetting("D"))
            {
                Log("Ads finished");
                Disable();
            }
            return GetWaitSetting();

        }



        private bool UseMath
        {
            get
            {
                return GetBoolSetting("UseMath");
            }
        }
        private bool NeedChange
        {
            get
            {
                return (!(VisibleMath == UseMath) || ElementByXPath("//li[@class='selected']//span[contains(text(),'hCaptcha')]") != null);
            }
        }
        private bool VisibleMath
        {
            get
            {

                return IsVisible(ElementByXPath("//img[contains(@src,'1captcha')]"));
            }

        }

        public bool CheckConditions(IWebElement element)
        {
            if (element == null)
            {
                return false;
            }
            return !element.Text.ToLower().Contains("hcaptcha");
        }
        public int SolveCapt()
        {
            var SwitchCaptcha = NeedChange ? ElementByXPath("//input[contains(@class,'select-dropdown')]") : null;
            if (IsVisible(SwitchCaptcha))
            {
                Click(SwitchCaptcha);
                Wait(1);
                FaucetCollector.Utilities.HtmlFilter.HtmlElement filter = new FaucetCollector.Utilities.HtmlFilter.HtmlElement();


                var SelectCaptcha = ElementsByXPath("//li[not(contains(@class,'selected')) and contains(@id,'select')]").FirstOrDefault(x => CheckConditions(filter.GetFirstChild(x, this)));
                if (SelectCaptcha != null)
                {
                    Click(SelectCaptcha);
                }
            }

            if (VisibleMath)
            {
                return SolveSymbolCaptcha();
            }

            return base.DoSolveCaptcha();

        }

        public bool SolveIcons()
        {
            try
            {
                var capt = ElementsByXPath("//a[@class='res']");

                if (capt.Count == 0)
                {
                    return false;
                }

                return GetSolutionAndClickCaptcha(capt);


            }
            catch (Exception ex)
            {
                Log("There is a problem solving icon captcha: " + ex.ToString());
            }
            return false;
        }

        private bool CompareImage(Bitmap image1, Bitmap image2)
        {
            for (int i = 0; i < image1.Height; i++)
            {
                for (int j = 0; j < image1.Width; j++)
                {
                    if (!SameColor(image1.GetPixel(j, i), image2.GetPixel(j, i), 100))
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        public bool GetSolutionAndClickCaptcha(List<IWebElement> capt)
        {

            Bitmap[] icons = new Bitmap[capt.Count];
            try
            {
                for (int i = 0; i < capt.Count; i++)
                {
                    icons[i] = TakeScreenshot(Base.Captcha.CaptchaService.Manual, capt[i]);

                }
                Wait();
                int result = 0;
                bool enc = false;
                for (int i = 0; i < capt.Count - 1 && !enc; i++)
                {
                    for (int j = i + 1; j < capt.Count && !enc; j++)
                    {
                        bool result_ = CompareImage(icons[i], icons[j]);
                        if (result_)
                        {
                            result = i;
                            enc = true;
                        }
                    }

                }
                Click(capt[result]);
            }
            finally
            {
                DisposeIEnumerable(icons);
            }

            return true;
        }
        public void DisposeIEnumerable(IEnumerable<IDisposable> DisposableElements)
        {

            foreach (var disposable in DisposableElements)
            {
                disposable.Dispose();
            }

        }
        private bool SameColor(Color c1, Color c2, double thre)
        {
            int r = c1.R - c2.R;
            int g = c1.G - c2.G;
            int b = c1.B - c2.B;
            if (r * r + g * g + b * b > thre * thre)
            {
                return false;
            }
            return true;
        }
        private static bool IsANumber(string number)
        {
            return number.All(x => char.IsDigit(x));
        }
    }

}
