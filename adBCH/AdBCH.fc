using FaucetCollector.Script;
using System;
using System.Linq;
//css_ref FaucetCollector.Utilities
public class AdBchScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://adbch.cc/")
            {
                new FaucetSetting(){Display="Username",Type=EditorType.TextBox,Required=true,Name="User"},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting( ){ Name="Shortlink",Display="Do Shortlink",Type=EditorType.CheckBox,Default=false }
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start( )
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title="adBCH|seconds left";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath="//*[text()='']";
        FailXPath="//*[text()='']";

        //Let Faucet Collector start up everything
        base.Start( );
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit( )
    {
        //Let Faucet Collector continue.
        return base.DoInit( );
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn( )
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//*[contains(@href,'logout')]")!=null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin( );
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin( )
    {
        GoToUrl("https://adbch.cc/login");
        Wait(1);

        var UserBox = ElementByXPath("//input[@placeholder='enter username']");
        if ( !IsVisible(UserBox) )
        {
            return Fail("User box is not visible");
        }
        SetText(UserBox , GetSetting("User"));
        var PasswordBox = ElementByXPath("//input[@type='password']");
        if ( !IsVisible(PasswordBox) )
        {
            return Fail("Password Box is not visible");
        }
        SetText(PasswordBox , GetPassword("Pass"));
        Wait(1);
        var result = DoSolveCaptcha();
        if ( result>0 )
        {
            return Fail("Fail solving captcha");
        }
        var ButtonLogin = ElementByXPath("//input[@value='login']");
        if ( !IsVisible(ButtonLogin) )
        {
            return Fail("Button login is not visible");
        }
        Click(ButtonLogin);

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin( );
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin( );
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime( )
    {
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime( );
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha( );
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha( );
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha( );
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha( );
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet( )
    {
        GoToUrl("https://adbch.cc/surf");
        Wait( );
        var DivCaptcha = ElementByXPath("//div[@class='g-recaptcha']");
        var ButtonAd = ElementByXPath("//input[@value='View']");
        int NClaims = 0;
        string BalanceText = string.Empty;
        int captchaTries=0;
        int AdTries=0;
        while ( (IsVisible(DivCaptcha)||IsVisible(ButtonAd)) && captchaTries<5 && AdTries <10 )
        {

            var Balance = ElementByXPath("//p[@class='white-text flow-text' and contains(text(),'Account Balance')]//b");
            if ( Balance!=null )
            {
                BalanceText=Balance.Text;
            }
            if ( IsVisible(DivCaptcha) )
            {
                AdTries=0;
                captchaTries++;
                var result = DoSolveCaptcha();
                if ( result>0 )
                {
                    Driver.Navigate( ).Refresh( );
                    Log("Something is wrong with the captcha");
                    Wait( );

                }
                var ButtonSendCaptcha = ElementByXPath("//input[@value='Enter']");
                if ( IsVisible(ButtonSendCaptcha) )
                {
                    Click(ButtonSendCaptcha);
                }
                Wait(2);
                DivCaptcha=ElementByXPath("//div[@class='g-recaptcha']");
                ButtonAd=ElementByXPath("//input[@value='View']");
                continue;

            }
            else
            {
                try
                {
                    AdTries++;
                    captchaTries=0;
                    CheckForPopupsEnabled=false;
                    Click(ButtonAd , false);
                    Wait(1);
                    Driver.SwitchTo( ).Window(Driver.WindowHandles[0]);
					Log("Viewing ad: " + ElementByXPath("/html/body/div[1]/div[2]/div[2]/h4/b").Text);

                    var Timer = ElementByXPath("//h5[@id='timer']");
                    DateTime Timeout = DateTime.Now.AddSeconds(135);
                    while ( IsVisible(Timer) )
                    {
                        Wait(1);
                        if ( DateTime.Now>Timeout )
                        {
                            Log("TIMEOUT REACHED");
                            break;
                        }
                        Timer=ElementByXPath("//h5[@id='timer']");
                    }

                }
                finally
                {
                    CheckForPopupsEnabled=true;
                    Driver.SwitchTo( ).Window(Driver.WindowHandles[0]);
                    CheckForPopups( );
                }
            }
            Balance=ElementByXPath("//p[@class='white-text flow-text' and contains(text(),'Account Balance')]//b");
            if ( Balance!=null&&Balance.Text!=BalanceText )
            {

                NClaims++;
            }


            Driver.Navigate( ).Refresh( );
            Wait( );
            DivCaptcha=ElementByXPath("//div[@class='g-recaptcha']");
            ButtonAd=ElementByXPath("//input[@value='View']");

        }
        if ( NClaims==0 )
        {
            ClaimFailed( );
            IsSuccess=false;
            Log("0 Ads Viewed , probably there is no ads.");
        }
        else
        {
            IsSuccess=true;
            ClaimSuccess( );
            Log(NClaims.ToString( )+" Ads Viewed.");
        }

        if ( GetBoolSetting("Shortlink") )
        {
            GoToUrl("https://adbch.cc/shortlinks");
            var availableShortlinks=ElementsByXPath("//a[@title='View Links']").Where(x=>IsVisible(x)).ToList();

            Log("there are "+availableShortlinks.Count+" available shortlinks");
            if ( availableShortlinks.Count>0 )
            {
                FaucetCollector.Utilities.ShortLinkBypasser bypasser =new FaucetCollector.Utilities.ShortLinkBypasser(this);
                Click(availableShortlinks[Random(0 , availableShortlinks.Count-1)]);

                bool solved=bypasser.DoShortLink();
                if ( solved )
                {
                    Log("Shortlink has been solved successfully");
                }
                else
                {
                    Log("there is a problem solving the shortlink, please see the log");
                }

            }

        }
        return GetWaitSetting( );



    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet( );
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult( )
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult( );
    }
}
