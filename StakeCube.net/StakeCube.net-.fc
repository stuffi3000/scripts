//==================//
//script Written by: ••AviramDayan•• 05/12/2018 06:00AM 
//Last Update: 11/02/2021 04:00AM - Version 14
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Drawing;
using System.Threading.Tasks;
using System.Collections.Generic;

//css_inc ShortLinkUtilities
//css_ref FaucetCollector.Utilities
//css_inc RecaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha


public class stakecube : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://stakecube.net/")
            {
				
                new FaucetSetting(){Name="Email",Display="Your Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Your Password",Type=EditorType.TextBox,Required=true},
				
			
                new FaucetSetting() { Name = "FaucetCollect", Display = "FaucetCollect - Auto Collect all coins every 24h", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "Label_1", Display = "PREMIUM FAUCETS - FREE - every 24h - SCC,SPE,MMO,ESBC,APR,TRBO,VSX,ASAFE,ABET,CTSC,KYDC,PRIV,GPKR", Type = EditorType.Label, Default = false},	
                new FaucetSetting() { Name = "Label_2", Display = "COMMUNITY FAUCETS - Updated seldom - BTC,LTC,DOGE,DASH,DC,BLOCK,DGB,PIVX", Type = EditorType.Label, Default = false},	
                //new FaucetSetting() { Name = "AutoVote", Display = "AutoVote - When your account is verified - 1 vote costs 1 SCC", Type = EditorType.CheckBox, Default = true},	
 
                /*			
                new FaucetSetting() { Name = "AutoWithdraw", Display = "AutoWithdraw - Withdraw (when you got 7600 satoshi)", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "ExchangeAll", Display = "ExchangeAll - to Bitcoin (soon)", Type = EditorType.CheckBox, Default = true},
				
                new FaucetSetting(){Name="BWSwallet",Display="BWS Wallet",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="MMOwallet",Display="MMO Wallet",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="MMOwallet",Display="MMO Wallet",Type=EditorType.TextBox,Required=true},				
                new FaucetSetting(){Name="WAGEwallet",Display="WAGE Wallet",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="APRwallet",Display="APR Wallet",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="TRBOwallet",Display="TRBO Wallet",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="XBRCwallet",Display="XBRC Wallet",Type=EditorType.TextBox,Required=true},
				*/																				

            };
        }
    }
	
	


//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "StakeCube";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath ="//*";
        FailXPath = "//*";  //*[text()='']
		
        //TimerIsCountingUp = true;

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//


    bool ad; //custom bool

    public override int DoInit()
    {


        //Let Faucet Collector continue.
        return base.DoInit();
    }



//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //if the Logout apper
        return ElementByXPath("//div[contains(@class,'dropdown dropdown-c')]") != null;

        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//
	

	
//=============//
//BeforeLogin 
//=============//
 public override int BeforeLogin()
 {
 
 
   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.BeforeLogin();
 }
//=============//
//BeforeLogin 
//=============//
	
	
	
//==============//
//start DoLogin
//==============//
 public override int DoLogin()
 {

	 var LoginVar = ElementByXPath("//div[contains(@class,'dropdown dropdown-c')]"); //Login

     if (!IsVisible(LoginVar))
     {	
 	    // go to login page
	    Log("Login: go to login page");
	    GoToUrl("https://stakecube.net/app/account/login");	
	    Wait();		
	    Wait(5);
				
	    var UserNameVar = ElementByXPath("//input[contains(@class,'email')]");
        Log("Login: set Email");
        SetText(UserNameVar, GetSetting("Email"));
		
	    Wait(2);
				
	    var PasswordVar = ElementByXPath("//input[contains(@class,'password')]");
        Log("Login: set Password");
        SetText(PasswordVar, GetSetting("Password"));
		
		Wait(2);			
		
        Recaptcha_Function(); // call to solve
		
	    Wait(2);

		//login button
        var LoginButton1 = ElementByXPath("//button[contains(@class,'btn-login')]");
        Log("Login: Login Button 1");	
        Click(LoginButton1);
		
	    Wait();	
		
     }//end LoginVar
 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
 }

//==============//
//start DoLogin
//==============//
	

	
//==============//
//start AfterLogin
//==============//
 public override int AfterLogin()
 {

 
    //This faucet has nothing to do here. We will let Faucet Collector handle it.
    return base.AfterLogin();
 }
	
//==============//
//start AfterLogin
//==============//	
	

	
//=============//
//GetFaucetWaitTime
//=============//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();	
        }
		
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//=============//
//GetFaucetWaitTime
//=============//
	
	
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	

//================//	
//BeforeSolveCaptcha
//================//	
    public override int BeforeSolveFaucet()
    {
		

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
//================//	
//BeforeSolveCaptcha
//================//	


//=============//	
//DoSolveFaucet
//=============//
 public override int DoSolveFaucet()
 {

    //=======//
    //AutoVote - need to wait for the next updates improvements
    //========//
	
     /*  
    if (GetBoolSetting("AutoVote"))
    { 

		//var check
        var verifiedVotePageUnlock = ElementByXPath("//div[@style='background-color: red;']"); 
		
	
		//if Unlock	visible - so skip
        if (IsVisible(verifiedVotePageUnlock))
        {
		 Log("Vote Page is Unlock");
		}

		
		//if Unlock	Not visible - so do stuff
        if (!IsVisible(verifiedVotePageUnlock))
        {
			
        GoToUrl("https://stakecube.net/app/community");
		Log("AutoVote: go to verified page to check" );
				
		//table/tbody/tr[2]/td[1]/button
        var Coin_1_Vote = ElementByXPath("//table/tbody/tr[1]/td[1]/button"); 
        var Coin_2_Vote = ElementByXPath("//table/tbody/tr[2]/td[1]/button"); 
        var Coin_3_Vote = ElementByXPath("//table/tbody/tr[3]/td[1]/button"); 
        var Coin_4_Vote = ElementByXPath("//table/tbody/tr[4]/td[1]/button"); 
        var Coin_5_Vote = ElementByXPath("//table/tbody/tr[5]/td[1]/button"); 
        var Coin_6_Vote = ElementByXPath("//table/tbody/tr[6]/td[1]/button"); 
        var Coin_7_Vote = ElementByXPath("//table/tbody/tr[7]/td[1]/button"); 
        var Coin_8_Vote = ElementByXPath("//table/tbody/tr[8]/td[1]/button"); 
        var Coin_9_Vote = ElementByXPath("//table/tbody/tr[9]/td[1]/button"); 
        var Coin_10_Vote = ElementByXPath("//table/tbody/tr[10]/td[1]/button"); 

	    Wait(3);	
        Log("AutoVote: Coin_1_Vote");	
        Click(Coin_1_Vote);

	    Wait(3);	
        Log("AutoVote: Coin_2_Vote");	
        Click(Coin_2_Vote);
		
	    Wait(3);	
        Log("AutoVote: Coin_3_Vote");	
        Click(Coin_3_Vote);
		
	    Wait(3);	
        Log("AutoVote: Coin_4_Vote");	
        Click(Coin_4_Vote);
		
	    Wait(3);	
        Log("AutoVote: Coin_5_Vote");	
        Click(Coin_5_Vote);
		
	    Wait(3);	
        Log("AutoVote: Coin_6_Vote");	
        Click(Coin_6_Vote);
		
	    Wait(3);	
        Log("AutoVote: Coin_7_Vote");	
        Click(Coin_7_Vote);		
		
	    Wait(3);	
        Log("AutoVote: Coin_8_Vote");	
        Click(Coin_8_Vote);
		
	    Wait(3);	
        Log("AutoVote: Coin_9_Vote");	
        Click(Coin_9_Vote);
		
	    Wait(3);	
        Log("AutoVote: Coin_10_Vote");	
        Click(Coin_10_Vote);		
	    }

       } // end Alert_Message not apper
		

    } // end AutoVote
	*/		
     //============//


     //============//
    //FaucetCollect
    //=============//
    if (GetBoolSetting("FaucetCollect"))
    { 

		//go to faucet
        GoToUrl("https://stakecube.net/app/community/faucets");
		Log("FaucetCollect: Collect All" );
	    Wait();		
	    Wait(5);	
		
        var TimeToWaitForBreak = DateTime.Now.AddSeconds(360);
        while (true)
        {
        
          var FaucetCheck = ElementByXPath("//button[contains(@onclick,'claim')]");
          if (FaucetCheck !=null) //Visible
          {
        
            Wait(5);
        
            var FaucetButton = ElementByXPath("//button[contains(@onclick,'claim')]");
            Click(FaucetButton);
            Log("FaucetClaim - click");
        
            Wait(2);
        
            var SuccessMessage = ElementByXPath("//div[contains(@class,'jq-toast-single jq-has-icon jq-icon-success')]");
            if (IsVisible(SuccessMessage))
            {
            Log(SuccessMessage.Text);
            ClaimSuccess(); //Success
            }
        
            Driver.Navigate().Refresh();
            Wait(4);
			
          }// end FaucetCheck
        
          if (FaucetCheck ==null) //NOT Visible
          {
          Log("FaucetClaim - break - not Available");
          break;
          }
        
          if (DateTime.Now > TimeToWaitForBreak) //if the time above 65 sec 
          {
          Log("FaucetClaim - break - TimeToWaitForBreak");
          break; //break the wait loop
          }
        
        } //end while true	
	
    } // end FaucetCollect
    //=============//


     //============//
    //AutoWithdraw
    //=============//
	/*
    if (GetBoolSetting("AutoWithdraw"))
    { 

		//first go to page to check
	    GoToUrl("https://stakecube.net/app/coin/");
		
		Wait(2);
		
		//Click on Withdraw Button
	    var CheckButton2 = ElementByXPath("//*[@id='withdraw-button']");
		Log("AutoWithdraw: CheckButton2");	
        Click(CheckButton2);
		
		//if all done - lets put Success Message with info
		var SuccessMessageVar = ElementByXPath("//*[@id='template-response']/span/div[2]");
        if (IsVisible(SuccessMessageVar))
        {		
		Log(SuccessMessageVar.Text);
        }
		
        Wait(2);	
	
	    Log("we return after 60 min");	  

    } //end AutoWithdraw
    */	
    //=============//
		
    Wait();
		
    //ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
    //return GetWaitSetting();	
    return Time_Function();

   
   //We are good to continue
   return base.DoSolveFaucet();
 }
 
//=============//	
//DoSolveFaucet
//=============//
 
	
//===============//
//AfterSolveFaucet
//===============//
 public override int AfterSolveFaucet()
 {
  
  //Let Faucet Collector continue
  return base.AfterSolveFaucet();
	
 }
//===============//
//AfterSolveFaucet
//===============//


    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
 

        //=================//
       //Time_Function
        //=================//
        public int Time_Function()
        {
			
           var MinVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[2]/span[1]") ;
		   var SecVar = ElementByXPath("//article[contains(@class,'maincontent')]//span[3]/span[1]") ;

           if (IsVisible(MinVar))
           {
	         Log("ClaimBTC - WaitTimerText apper - return to site time"); 
             int min,sec;
             min = Convert.ToInt32(MinVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[0])*60;
             sec = Convert.ToInt32(SecVar.Text.Trim().Replace("m.", "").Replace("s.", "").Split(' ')[1]);
             return min+sec;
           } 

           if (!IsVisible(MinVar))
           {
	            Log("ClaimBTC - return to your time"); 
		        return GetWaitSetting();
           }

           return 0;		
        }//end Time_Function
        //=================//	
		
	
        //=================//
       //Recaptcha_Function
        //=================//

        public int Recaptcha_Function()
        {
			
          //DoSolveImageCaptcha
          var SolveMedia = ElementByXPath ("//img[contains(@id,'adcopy-puzzle-image-image')]"); 
          if (IsVisible(SolveMedia))
		  {  
            Log("DO SolveMedia");	  
	        var result_2 = DoSolveImageCaptcha(ElementByXPath("//img[contains(@id,'adcopy-puzzle-image-image')]"),ElementByXPath("//input[@name='adcopy_response']")); 
		  }
		  
	     //for recaptcha popup after click on button - ("//button[contains(@class,'reload')] | //button[contains(@id,'reload')] ")
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
            //SolveCaptcha if apper
            Log("DO Recaptcha");	  
            var result = base.DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            RecaptchaUtility utility = new RecaptchaUtility(this);
            utility.DoSolve();
		  }

		return 0;
        }//end Recaptcha_Function
        //=================//	
 
 
} //END public class 
